
Springboot Bootstrap, JQuery
----------------------------

Database Config:

spring.datasource.url=jdbc:mysql://localhost:3306/springboot_jdbc
spring.datasource.username=root
spring.datasource.password=Admin@123
===============================

pom.xml
-----------

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>jdbc_decoration1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>jdbc_decoration1</name>
	<description>JDBC_Bootstrap_jQuery</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.webjars</groupId>
		    <artifactId>bootstrap</artifactId>
		    <version>5.0.1</version>
		</dependency>
		<dependency>
		    <groupId>org.webjars</groupId>
		    <artifactId>font-awesome</artifactId>
		    <version>6.4.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>webjars-locator-core</artifactId>
		</dependency>

		
		<dependency>
		    <groupId>org.webjars</groupId>
		    <artifactId>jquery</artifactId>
		    <version>3.7.1</version>
		</dependency>



		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

===================================================
java files:
	Student.java(model)
	StudentContoller.java(cotroller)
	StudentDao.java(interface)
	StudentDaoImpl.java(interface implementation )

Model 
----
Student.java
package com.example.demo;

import jakarta.validation.constraints.NotEmpty;

public class Student {

	private int id;
	@NotEmpty(message="Name is required")
	private String name;
	@NotEmpty(message="Address is required")
	private String address;
	
	
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public Student(int id, String name, String address) {
		super();
		this.id = id;
		this.name = name;
		this.address = address;
	}
	public Student() {
		super();
	}
	
	
	
	
}



==============================================================

Controller:
StudentController.java

package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.validation.Valid;

@Controller
@RequestMapping("/students")
public class StudentController {
	
	@Autowired
	StudentDao studentDao;
	
	@GetMapping("/")
	public String indexPage(Model model) {
		
		model.addAttribute("students",studentDao.findAll());
		return "students/index";
	}
	
	@GetMapping("/create")
	public String createPage(Model model) {
		
		model.addAttribute("student",new Student());
		return "students/create";
	}
	
	@PostMapping("/submit")
	public String createPage(@Valid @ModelAttribute("student") Student student,BindingResult bindingResult) {
		
		System.out.println("hello from controller...");
		
		if(bindingResult.hasErrors()) {
			return "/students/create";
		}
		else {
			
			studentDao.save(student);
			
			return "redirect:../students/";
		}
		
	}
	
	@GetMapping("/edit")
	public String editPage(@RequestParam("id") int id,Model model) {
		
		Student student=studentDao.findById(id);
		model.addAttribute("student",student);
		
		return "students/edit";
	}
	
	@PostMapping("/update")
	public String updatePage(@ModelAttribute("student") Student student) {
		
		
		studentDao.update(student, student.getId());
		
		return "redirect:../students/";
	}
	
	@GetMapping("/delete")
	public String updatePage(@RequestParam("id") int id) {
		
		
		studentDao.deleteById(id);
		
		return "redirect:../students/";
	}

}

-----------------------------------------

StudentDao.java

package com.example.demo;

import java.util.List;

public interface StudentDao {
	
	public List<Student> findAll();
	
	public Student findById(int id);
	
	public int deleteById(int id);
	
	public int save(Student s);
	
	public int update(Student s, int id);

}

----------------------------------------

StudentDaoImpl.java

package com.example.demo;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

@Repository
public class StudentDaoImpl implements StudentDao {
	
	@Autowired
	private JdbcTemplate jdbcTemplate;

	@Override
	public List<Student> findAll() {
		// TODO Auto-generated method stub
		return jdbcTemplate.query("SELECT * from students", new BeanPropertyRowMapper<Student>(Student.class));
	}

	@Override
	public Student findById(int id) {
		// TODO Auto-generated method stub
		return jdbcTemplate.queryForObject("SELECT * from students WHERE id=?", new BeanPropertyRowMapper<Student>(Student.class),id);
	}

	@Override
	public int deleteById(int id) {
		// TODO Auto-generated method stub
		return jdbcTemplate.update("DELETE from students WHERE id=?",id);
	}

	@Override
	public int save(Student s) {
		// TODO Auto-generated method stub
		return jdbcTemplate.update("INSERT into students(name,address) values(?,?)", new Object[] {s.getName(),s.getAddress()});
	}

	@Override
	public int update(Student s, int id) {
		// TODO Auto-generated method stub
		return jdbcTemplate.update("UPDATE students set name=?,address=? WHERE id=?",new Object[] {s.getName(),s.getAddress(),id});
	}

}

============================================



templates config:


fragments
	->header.html
	->footer.html

=========================
header.html

<header th:fragment="header">
  <nav class="navbar navbar-expand-md bg-dark navbar-dark p-2">
    <a class="navbar-brand" th:href="@{/students}">
      Home
    </a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#topNavbar">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="topNavbar">
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link" th:href="@{/students/create}">Create New</a>
        </li>
       
      </ul>
    </div>
  </nav>
</header>


footer.html


<footer class="text-center bg-dark p-2 text-white mt-5">
  Copyright Â© Northern City. 2023
</footer>

==========================

templates
->students
	->index.html
	->edit.html
	->create.html

==========================

index.html


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0" />
  <title> Northern City </title>

  <link rel="stylesheet" type="text/css" th:href="@{/webjars/bootstrap/css/bootstrap.min.css}" />
 
  <script type="text/javascript" th:src="@{/webjars/jquery/jquery.min.js}"></script>
  <script type="text/javascript" th:src="@{/webjars/bootstrap/js/bootstrap.min.js}"></script>
</head>

<body>
<div class="container my-2 p-2">	
  <div th:replace="./fragments/header :: header"></div>
</div>

<div class="container p-2">
	<a th:href="@{/students/create}" class="btn btn-primary"> Create New Student </a>
</div>
<div class="container p-2">
<table class="table table-striped">
	<tr>
		<td> Id  </td>
		<td> Name </td>
		<td> Address </td> 
		<td> Actions </td>
	</tr>
	<tr th:each="student:${students}">
		<td th:text="${student.id}"></td>
		<td th:text="${student.name}"></td>
		<td th:text="${student.address}"></td>
		<td>
			<a th:href="@{/students/edit(id=${student.id})}" class="btn btn-warning"> <i class="fa fa-pencil"></i> Edit </a> | 
			<a th:href="@{/students/delete(id=${student.id})}" th:studentRec="${student.name}" class="btn btn-danger btn-delete"
    title="Delete this Record" data-bs-toggle="modal" data-bs-target="#confirmModal"><i class="fa fa-trash"></i>  Delete </a>
		</td>
	</tr>
</table>
</div>
<div class="container my-2">	
 <div th:replace="./fragments/footer :: footer"></div>
 </div>
 
 <!-- modal -->
 
 <div class="modal fade text-center" id="confirmModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Delete Confirmation</h5>
        <button type="button" class="close" data-bs-dismiss="modal">
          <span aria-hidden="true">Ã</span>
        </button>
      </div>

      <div class="modal-body">
        <span id="confirmText"></span>
      </div>

      <div class="modal-footer">
        <a type="button" id="yesBtn" class="btn btn-danger">Yes</a>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
      </div>
    </div>
  </div>
 
 
 <script type="text/javascript">
  $(document).ready(function () {
    $(".btn-delete").on("click", function (e) {
      e.preventDefault();
      link = $(this);

	  console.log(link);
	  
      studentRec = link.attr("studentRec");
       console.log(studentRec);
      $("#yesBtn").attr("href", link.attr("href"));
      $("#confirmText").html("Do you want to delete the Student Record \<strong\>" + studentRec+ "\<\/strong\>?");
      $("#confirmModal").modal();
    });
  });
</script>
</body>
</html>

====================================

create.html


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0" />
  <title> Northern City </title>

  <link rel="stylesheet" type="text/css" th:href="@{/webjars/bootstrap/css/bootstrap.min.css}" />
    <link rel="stylesheet" type="text/css" th:href="@{/webjars/font-awesome/css/all.min.css}" />
  <script type="text/javascript" th:src="@{/webjars/jquery/jquery.min.js}"></script>
  <script type="text/javascript" th:src="@{/webjars/bootstrap/js/bootstrap.min.js}"></script>
</head>

<body>
<div class="container my-2 p-2">	
  <div th:replace="./fragments/header :: header"></div>
</div>

<div class="container my-2 p-2">
	<div class="row"> 
		<div class="col-lg-6 p-5">
<form th:action="@{/students/submit}" method="post" th:object="${student}"> 
<table class="table table-striped">
	<tr>
		<td> Enter Student Name  </td>
		<td> <input type="text" th:field="*{name}" class="form-control"> </td>
		<td th:if="${#fields.hasErrors('name')}" th:errors="*{name}">Id Error</td>
		
	</tr>
	<tr>
		<td> Enter Student Address  </td>
		<td> <input type="text" th:field="*{address}" class="form-control"> </td>
		<td th:if="${#fields.hasErrors('address')}" th:errors="*{address}">Id Error</td>
		
	</tr>
	
	<tr>
		<td>   </td>
		<td> <button type="submit" class="btn btn-outline-warning form-control"> Save </button> </td>
		
	</tr>
	
</table>

</form>

    </div>
    <div class="col-lg-6 p-5 text-center"> 
		<i class="fa-solid fa-user-circle" style="font-size:100px;color:black;"></i>
	</div>
</div>
</div>
</body>
</html>

=========================

edit.html


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0" />
  <title> Northern City </title>

  <link rel="stylesheet" type="text/css" th:href="@{/webjars/bootstrap/css/bootstrap.min.css}" />
    <link rel="stylesheet" type="text/css" th:href="@{/webjars/font-awesome/css/all.min.css}" />
  <script type="text/javascript" th:src="@{/webjars/jquery/jquery.min.js}"></script>
  <script type="text/javascript" th:src="@{/webjars/bootstrap/js/bootstrap.min.js}"></script>
</head>

<body>
<div class="container my-2 p-2">	
  <div th:replace="./fragments/header :: header"></div>
</div>



<div class="container my-2 p-2">
	<div class="row"> 
		<div class="col-lg-6">
<form th:action="@{/students/update}" method="post" th:object="${student}"> 
<table class="table table-striped">
	<input type="hidden" th:field="*{id}"> 
	<tr>
		<td> Enter Student Name  </td>
		<td> <input type="text" th:field="*{name}" class="form-control"> </td>
		<td th:if="${#fields.hasErrors('name')}" th:errors="*{name}">Id Error</td>
		
	</tr>
	<tr>
		<td> Enter Student Address  </td>
		<td> <input type="text" th:field="*{address}" class="form-control"> </td>
		<td th:if="${#fields.hasErrors('address')}" th:errors="*{address}">Id Error</td>
		
	</tr>
	
	<tr>
		<td>   </td>
		<td> <button type="submit" class="form-control btn-outline-primary"> <i class="fa-solid fa-refresh"></i> Update </button> </td>
		
	</tr>
	
</table>

</form>
      </div>
      <div class="col-lg-6 text-center">
		  <i class="fa-solid fa-user" style="font-size:100px;color:black;"></i>
	  </div>

</div>
</div>


</body>
</html>


=================================================


